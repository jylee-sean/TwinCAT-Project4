
module h. 

private: 

//sf->execute();


	// what is static / inline function ?
	//static bool set_point(void);  // inline ? static ? constexpr ?
	//static bool clear_set_point(void);
	static bool check_target_reached(void);
	static bool set_servo_off(void);
	static bool set_servo_on(void);
	static bool set_fault_reset(void);
	static bool check_servo_on(void);

	static bool set_disable_voltage(void);
	static bool set_shutdown(void);
	static bool set_switch_on(void);
	static bool set_ready_to_switch_on(void);

	static bool fault_recovery();
	static bool set_position();


	//bool(*fault_reset[2])(void) = { set_servo_off,fault_recovery };

	bool(*servo_on[4])(void) = { set_disable_voltage,set_shutdown,set_ready_to_switch_on, set_switch_on };


	
	//TODO: state check procees can be implmented using 'funtion pointer'

	

	//void set_point()
	//{
		// set point
	//	for (auto motor = motors.begin(); motor != motors.end(); motor++) {
	//		set_control_word(command::switch_on_and_enable_oepration);
	//	}

		//for (auto motor = motors.begin(); motor != motors.end(); motor++) {
		//m_Outputs.control_word = command::switch_on_and_enable_oepration;
		//}
	//}
	//void clear_set_point()
	//{
		// clear set point
	//	for (auto motor = motors.begin(); motor != motors.end(); motor++) {
	//		set_control_word(command::enable_operation);
	//	}
		//for (auto motor = motors.begin(); motor != motors.end(); motor++) {
		//	m_Outputs.control_word = command::enable_operation;
		//}
	//}
	bool check_target_reached()
	{
		/*for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if (check_status_word(USHORT target_reached)) {
				motor->UpdateCurrentPosition(m_DataArea3.target_position);
			}
			else {
				return fail;
			}
		}
		return success;*/

		//for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			
		//	if ((m_Inputs.status_word & target_reached) != target_reached) {
				//m_DataArea3.state = state::standby; 
		//		return;
		//	}

			//
		//}
	};


	bool set_servo_off()  // set : disable voltage check: switch on disabled
	{	
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {			
			m_Outputs.control_word = command::disable_voltage;
		}
	};

	bool check_servo_off() 
	{
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::fault) == status_word::fault) {
				return set_fault_reset();
			}
			if ((m_Inputs.status_word & status_word::switch_on_disabled) != status_word::switch_on_disabled) {
				return fail;
			}
		}
		return success;
	};

	bool check_servo_on() 
	{
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::operation_enabled) != status_word::operation_enabled) {
				return fail;
			}
		}
		return success;
	};


	bool set_disable_voltage() {
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::fault) == status_word::fault) {
				m_Outputs.control_word = command::disable_voltage;
			}
		}
		return success;
	}

	bool set_shutdown() {
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::switch_on_disabled) == status_word::switch_on_disabled) {
				m_Outputs.control_word = command::shutdown;
			}
		}
		return success;
	}

	bool set_switch_on() {
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::switch_on) == status_word::switch_on) {
				m_Outputs.control_word = command::enable_operation;
			}
		}
		return success;
	}

	bool set_ready_to_switch_on() {
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::ready_to_switch_on) == status_word::ready_to_switch_on) {
				m_Outputs.control_word = command::switch_on;
			}
		}
		return success;
	}


	bool set_servo_on()  // set : disable voltage or disable->ready->on,  check: fault ? or shutdown->switch_on -> enable_operation
	{
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & status_word::fault) == status_word::fault) {
				m_Outputs.control_word = command::disable_voltage;
			}
			else if ((m_Inputs.status_word & status_word::switch_on_disabled) == status_word::switch_on_disabled) {
				m_Outputs.control_word = command::shutdown;
			}
			else if ((m_Inputs.status_word & status_word::switch_on) == status_word::switch_on) {
				m_Outputs.control_word = command::enable_operation;
			}
			else if ((m_Inputs.status_word & status_word::ready_to_switch_on) == status_word::ready_to_switch_on) {
				m_Outputs.control_word = command::switch_on;
			}
			else {
				/* do nothing */
			}	
		}
	};


	bool set_position() 
	{
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			m_Outputs.target = m_DataArea3.target_position;
		}
		//TODO: the way to check if target value is set normally is necessary
	};


	
	bool fault_recovery() 
	{
		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			if ((m_Inputs.status_word & switch_on_disabled) != switch_on_disabled) {
				m_Outputs.control_word = command::disable_voltage;
				return fail;
			}
		}
		return success;
	};

	bool set_fault_reset() {

		//for (auto motor = motors.begin(); motor != motors.end(); motor++) {
		//	m_Outputs.control_word = command::disable_voltage;
		//}

		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			m_Outputs.control_word = command::fault_reset;
		}
		return success;
	}

	bool check_status() {

		for (auto motor = motors.begin(); motor != motors.end(); motor++) {
			//if ((m_Inputs.status_word & fault) == fault) {
			//transition 15
			m_Outputs.control_word = command::fault_reset;
			//}
		}
		return success;

	}